

一 加密：
	#coding:utf-8
	from django.shortcuts import render,render_to_response,HttpResponseRedirect,HttpResponse
	from models import *
	import re,os
	from datetime import datetime
	import time
	from cgworldline.settings import MEDIA_ROOT,EMAIL_HOST_USER
	from django.contrib.auth.hashers import make_password,check_password
	from django.core.mail import send_mail
	from django.utils.http import urlsafe_base64_decode,urlsafe_base64_encode
	from django.contrib.auth.tokens import default_token_generator
	from decorator import *
	import subprocess
	from django.core.paginator import Paginator

	from django.test import TestCase

	# Create your tests here.
	import socket
	import uuid

	def encodeCdkey(request):
		mymac=uuid.UUID(int = uuid.getnode()).hex[-12:]

		myname = socket.getfqdn(socket.gethostname())
		#nameMac = myname + mymac
		time = '2017-1-28 10:30:30'
		cdkey_time = int(time.mktime(time.strptime(time,'%Y-%m-%d %H:%M:%S')))

		#nameMacTime = nameMac[:10] + str(mytime) + nameMac[10:]
		nameMacTime = myname + mymac + str(cdkey_time)
		CDKEY= base64.encodestring(nameMacTime)
		return render_to_response('encodeCdkey.html',locals())
		
		
二	通过页面输入把cdkey写入cdkey.txt:

	#coding:utf-8
	from django.shortcuts import render,render_to_response,HttpResponseRedirect,HttpResponse
	from models import *
	import re,os
	from datetime import datetime
	import time
	#from django.contrib.auth.decorators import login_required
	from cgworldline.settings import MEDIA_ROOT,EMAIL_HOST_USER
	from django.contrib.auth.hashers import make_password,check_password
	from django.core.mail import send_mail
	from django.utils.http import urlsafe_base64_decode,urlsafe_base64_encode
	from django.contrib.auth.tokens import default_token_generator
	from decorator import *
	import subprocess
	from django.core.paginator import Paginator
	from project_model import Project_model


	def cdkey_past_dut(request):
		return render_to_response('cdkey_past_due.html')

	def usecdkey(request):
		return render_to_response('use_cdkey.html')
	def cdkey(request):
		if request.method == 'POST':
			cdkey = request.POST.get('cdkey')
			path = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
			open(path+os.sep+"cdkey.txt",'w').write(cdkey)
			return HttpResponseRedirect('/')
		return render_to_response('cdkey.html')
		
		
三  检查：
	装饰器检查 cdkey.txt 文件里面的cdkey
	
	def checkCdkey(function):
		def wrapped_view(request,*args,**kwargs):
			mymac=uuid.UUID(int = uuid.getnode()).hex[-12:]
			myname = socket.getfqdn(socket.gethostname())
			path = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

			ss = open(path+os.sep+"cdkey.txt").read()
			CDKEYDECODE = base64.decodestring(ss)

			checkMac = CDKEYDECODE.find(mymac)
			checkHostname = CDKEYDECODE.find(myname)

			if checkMac < 0:
				return HttpResponseRedirect('/usecdkey/')
		elif checkHostname <0:
			return HttpResponseRedirect('/usecdkey/')
			useTime = CDKEYDECODE[len(CDKEYDECODE)-10:]

			if int(useTime) < int(time.time()):
				return HttpResponseRedirect('/cdkey_past_dut/')
			return function(request,*args,**kwargs)
		return wrapped_view